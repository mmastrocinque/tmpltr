name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: [1.21, 1.22]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Format check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted:"
          gofmt -s -l .
          exit 1
        fi
      shell: bash
    
    - name: Vet
      run: go vet ./...
    
    - name: Run unit tests
      run: go test -v -race ./cmd/... ./internal/...
    
    - name: Build binary
      run: go build -v .
    
    - name: Run integration tests
      run: go test -v -tags=integration ./...
    
    - name: Test completions generation
      run: |
        ./tmpltr completion bash > /dev/null
        ./tmpltr completion zsh > /dev/null
        ./tmpltr completion fish > /dev/null
        ./tmpltr completion powershell > /dev/null
        ./tmpltr completion nushell > /dev/null
      shell: bash

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22
    
    - name: Run tests with coverage
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: v1.54.2

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

  build-matrix:
    name: Build Matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          # Windows ARM64 builds might not be needed
          - goos: windows
            goarch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p build
        if [ "$GOOS" = "windows" ]; then
          go build -ldflags "-s -w" -o build/tmpltr-$GOOS-$GOARCH.exe .
        else
          go build -ldflags "-s -w" -o build/tmpltr-$GOOS-$GOARCH .
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: tmpltr-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/

  release:
    name: Release
    needs: [test, coverage, lint, security, build-matrix]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create release builds
      run: |
        make release
        
        # Also generate completion scripts
        make completions
        
        # Create archives
        mkdir -p release
        for binary in build/release/tmpltr-*; do
          if [[ "$binary" == *windows* ]]; then
            zip -j "release/$(basename $binary .exe).zip" "$binary" build/completions/*
          else
            tar -czf "release/$(basename $binary).tar.gz" -C build/release "$(basename $binary)" -C ../completions .
          fi
        done
    
    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation - in a real project you might use a tool like git-chglog
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## Changes" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        files: |
          release/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}